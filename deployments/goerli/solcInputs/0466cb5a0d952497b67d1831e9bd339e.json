{
  "language": "Solidity",
  "sources": {
    "contracts/Voting.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\ncontract Voting {\n    mapping(address => bool) public voters;\n    struct Choice {\n        uint256 id;\n        string name;\n        uint256 votes;\n    }\n    struct Ballot {\n        uint256 id;\n        string name;\n        Choice[] choices;\n        uint256 end;\n    }\n    mapping(uint256 => Ballot) ballots;\n    uint256 nextBallotId;\n    address public admin;\n    mapping(address => mapping(uint256 => bool)) public votes;\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    function addVoters(address[] calldata _voters) external onlyAdmin {\n        for (uint256 i = 0; i < _voters.length; i++) {\n            voters[_voters[i]] = true;\n        }\n    }\n\n    function createBallot(\n        string memory name,\n        string[] memory choices,\n        uint256 offset\n    ) public onlyAdmin {\n        ballots[nextBallotId].id = nextBallotId;\n        ballots[nextBallotId].name = name;\n        ballots[nextBallotId].end = block.timestamp + offset;\n        for (uint256 i = 0; i < choices.length; i++) {\n            ballots[nextBallotId].choices.push(Choice(i, choices[i], 0));\n        }\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"only admin\");\n        _;\n    }\n\n    function vote(uint256 ballotId, uint256 choiceId) external {\n        require(voters[msg.sender] == true, \"only voters can vote\");\n        require(\n            votes[msg.sender][ballotId] == false,\n            \"voter can only vote once\"\n        );\n        require(\n            block.timestamp < ballots[ballotId].end,\n            \"can only vote until ballot end date\"\n        );\n        votes[msg.sender][ballotId] = true;\n        ballots[ballotId].choices[choiceId].votes++;\n    }\n\n    function result(uint256 ballotId) external view returns (Choice[] memory) {\n        require(\n            block.timestamp >= ballots[ballotId].end,\n            \"cannot see the ballot result before ballot end\"\n        );\n        return ballots[ballotId].choices;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}